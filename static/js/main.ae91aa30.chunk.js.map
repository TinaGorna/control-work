{"version":3,"sources":["Count.tsx","Display.tsx","SetMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Count","props","classNameBtnIncrement","show","maxV","classNameBtnReset","start","className","onClick","addInc","addReset","Display","displayWrapper","SetMenu","setMenuMaxClassName","setMenuStartClassName","btnSetClassName","type","defaultValue","value","localStorage","maxValue","onChange","changeMaxValue","startValue","changeStartValue","saveData","App","useState","Number","locMax","setMaxLoc","locStart","setStartLoc","setMaxValue","setStartValue","count","setCount","setShow","e","parseMax","currentTarget","setItem","JSON","stringify","parseStart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae91aa30.chunk.js","sourcesContent":["\r\n\r\ntype CountPropsType = {\r\n    show: number | string\r\n    start: number\r\n    maxV: number\r\n    addInc: () => void\r\n    addReset: () => void\r\n}\r\n\r\nfunction Count(props: CountPropsType) {\r\n\r\n    const classNameBtnIncrement = props.show === props.maxV || props.show === 'Set' || props.show === 'Error' ? \"Btn-increment-max\" : \"Btn-increment\"\r\n    const classNameBtnReset = props.show === props.start || props.show === 'Set' || props.show === 'Error' ? \"Btn-reset-start\" : \"Btn-reset\"\r\n\r\n    return (\r\n\r\n        <div className=\"Btn-wrapper\">\r\n\r\n            <div className={classNameBtnIncrement}>\r\n                <button onClick={props.addInc}>inc</button>\r\n            </div>\r\n\r\n            <div className={classNameBtnReset}>\r\n                <button onClick={props.addReset}>reset</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Count;","import React from \"react\";\r\nimport Count from \"./Count\";\r\n\r\ntype DisplayPropsType = {\r\n    show: number | string\r\n    start: number\r\n    count: number\r\n    addReset: () => void\r\n    maxV: number\r\n    addInc: () => void\r\n\r\n}\r\n\r\nfunction Display(props: DisplayPropsType) {\r\n    const displayWrapper = (props.show === props.maxV || props.show === \"Error\") ? \"Display-wrapper-max\" : \"Display-wrapper\"\r\n\r\n    return (\r\n        <div className=\"Counter-wrapper\">\r\n            <div className={displayWrapper}>\r\n                {props.show}\r\n            </div>\r\n            <Count\r\n                show={props.show}\r\n                start={props.start}\r\n                addInc={props.addInc}\r\n                addReset={props.addReset}\r\n                maxV={props.maxV}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Display;","import {ChangeEvent} from \"react\";\r\n\r\ntype setMenuPropsType = {\r\n    start: number\r\n    maxV: number\r\n    show: number | string\r\n    changeMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    saveData: () => void\r\n}\r\n\r\nfunction SetMenu(props: setMenuPropsType) {\r\n    const setMenuMaxClassName = (props.show === \"Error\") ? \"Set-menu-max-error\" : \"Set-menu-max-wrapper\"\r\n    const setMenuStartClassName = (props.show === \"Error\") ? \"Set-menu-start-error\" : \"Set-menu-start-wrapper\"\r\n    const btnSetClassName = (props.show === \"Set\") ? \"Btn-set\" : \"Btn-set-disable\"\r\n\r\n    return (\r\n        <div className=\"Set-menu-wrapper\">\r\n            <div className={setMenuMaxClassName}>\r\n                <div>MAX VALUE:</div>\r\n                <input type=\"number\" defaultValue={props.maxV} value={localStorage.maxValue}\r\n                       onChange={props.changeMaxValue}/>\r\n            </div>\r\n            <div className={setMenuStartClassName}>\r\n                <div>START VALUE:</div>\r\n                <input type=\"number\" defaultValue={props.start} value={localStorage.startValue}\r\n                       onChange={props.changeStartValue}/>\r\n            </div>\r\n            <div className=\"Btn-set-wrapper\">\r\n                <div className={btnSetClassName}>\r\n                    <button onClick={props.saveData}>set</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SetMenu;","import React, { useState, ChangeEvent } from 'react';\nimport './App.css';\nimport Display from \"./Display\";\nimport SetMenu from \"./SetMenu\";\n\nfunction App() {\n\n    const [locMax, setMaxLoc] = useState<number>(Number(localStorage.maxValue) ? Number(localStorage.maxValue) : 5)\n    const [locStart, setStartLoc] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n    const [maxValue, setMaxValue] = useState<number>(Number(localStorage.maxValue) ? Number(localStorage.maxValue) : 5)\n    const [startValue, setStartValue] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n    const [count, setCount] = useState<number>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n    const [show, setShow] = useState<number | string>(Number(localStorage.startValue) ? Number(localStorage.startValue) : 0)\n\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let parseStart: number = +e.currentTarget.value\n        if (parseStart >= -1 && locMax >= -1) {\n            setStartLoc(parseStart)\n            setShow('Set')\n            localStorage.setItem('startValue', JSON.stringify(Number(e.currentTarget.value)))\n        } else if (parseStart < -1 || parseStart >= locMax || locMax < 0) {\n            setShow('Error')\n        }\n    }\n\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let parseMax: number = +e.currentTarget.value\n        if (parseMax >= -1 && locStart >= -1) {\n            setMaxLoc(parseMax)\n            setShow('Set')\n            localStorage.setItem('maxValue', JSON.stringify(Number(e.currentTarget.value)))\n        } else if (parseMax < -1 || parseMax <= locStart || locStart < 0) {\n            setShow('Error')\n        }\n    }\n\n    function increment() {\n        if (count < maxValue && locStart >= 0 && locMax >= 0 && locStart < locMax && maxValue === locMax && startValue === locStart) {\n            setCount(count + 1)\n            setShow(count + 1)\n        } else if (maxValue !== locMax && startValue !== locStart) {\n            setShow('Set')\n        }\n    }\n\n    function reset() {\n        if (locStart >= 0 && locMax >= 0 && locStart < locMax  && maxValue === locMax && startValue === locStart) {\n            setCount(Number(localStorage.startValue))\n            setShow(Number(localStorage.startValue))\n        } else if(maxValue !== locMax && startValue !== locStart) {\n            setShow('Set')\n        }\n    }\n\n    const saveData = () => {\n        if(locStart >= 0 && locMax >=0 && locStart < locMax) {\n            setMaxValue(Number(localStorage.maxValue))\n            setStartValue(Number(localStorage.startValue))\n            setCount(Number(localStorage.startValue))\n            setShow(Number(localStorage.startValue))\n        } else {\n            setShow('Error')\n        }\n    }\n\n    return (\n        <div className='App-wrapper'>\n\n            <SetMenu\n                start={startValue}\n                maxV={maxValue}\n                show={show}\n                changeMaxValue={changeMaxValue}\n                changeStartValue={changeStartValue}\n                saveData={saveData} />\n            <Display\n                start={startValue}\n                maxV={maxValue}\n                count={count}\n                show={show}\n                addInc={increment}\n                addReset={reset} />\n\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}